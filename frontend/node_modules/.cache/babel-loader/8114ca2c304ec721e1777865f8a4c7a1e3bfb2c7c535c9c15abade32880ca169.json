{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hamma\\\\Desktop\\\\CS4485\\\\Prediction\\\\WeatherForecastWebApp\\\\frontend\\\\src\\\\components\\\\WeatherChart.js\";\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, Filler } from 'chart.js';\nimport { Box } from '@mui/material';\n\n// Register Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, Filler);\nconst WeatherChart = ({\n  data\n}) => {\n  if (!data || data.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No data available for chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Extract dates and temperature values\n  const dates = data.map(item => item.date);\n  const maxTemps = data.map(item => item.predicted_tmax);\n  const minTemps = data.map(item => item.predicted_tmin);\n\n  // Prepare the chart data\n  const chartData = {\n    labels: dates,\n    datasets: [{\n      label: 'Max Temperature (°F)',\n      data: maxTemps,\n      borderColor: 'rgba(255, 99, 132, 1)',\n      backgroundColor: 'rgba(255, 99, 132, 0.2)',\n      pointBackgroundColor: 'rgba(255, 99, 132, 1)',\n      pointBorderColor: '#fff',\n      pointHoverBackgroundColor: '#fff',\n      pointHoverBorderColor: 'rgba(255, 99, 132, 1)',\n      tension: 0.3,\n      borderWidth: 3,\n      fill: false\n    }, {\n      label: 'Min Temperature (°F)',\n      data: minTemps,\n      borderColor: 'rgba(54, 162, 235, 1)',\n      backgroundColor: 'rgba(54, 162, 235, 0.2)',\n      pointBackgroundColor: 'rgba(54, 162, 235, 1)',\n      pointBorderColor: '#fff',\n      pointHoverBackgroundColor: '#fff',\n      pointHoverBorderColor: 'rgba(54, 162, 235, 1)',\n      tension: 0.3,\n      borderWidth: 3,\n      fill: false\n    }]\n  };\n\n  // Chart options\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'top',\n        labels: {\n          font: {\n            size: 14\n          }\n        }\n      },\n      tooltip: {\n        mode: 'index',\n        intersect: false,\n        backgroundColor: 'rgba(0, 0, 0, 0.8)',\n        titleFont: {\n          size: 14\n        },\n        bodyFont: {\n          size: 13\n        },\n        padding: 10,\n        cornerRadius: 8,\n        displayColors: true\n      }\n    },\n    scales: {\n      x: {\n        grid: {\n          display: false\n        },\n        ticks: {\n          maxTicksLimit: 15,\n          maxRotation: 45,\n          minRotation: 45\n        }\n      },\n      y: {\n        beginAtZero: false,\n        grid: {\n          color: 'rgba(0, 0, 0, 0.05)'\n        },\n        title: {\n          display: true,\n          text: 'Temperature (°F)',\n          font: {\n            size: 14,\n            weight: 'bold'\n          }\n        }\n      }\n    },\n    interaction: {\n      mode: 'nearest',\n      intersect: false\n    },\n    elements: {\n      point: {\n        radius: 2,\n        hoverRadius: 5\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      height: '100%',\n      width: '100%',\n      p: 1\n    },\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n};\n_c = WeatherChart;\nexport default WeatherChart;\nvar _c;\n$RefreshReg$(_c, \"WeatherChart\");","map":{"version":3,"names":["React","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Filler","Box","jsxDEV","_jsxDEV","register","WeatherChart","data","length","children","fileName","_jsxFileName","lineNumber","columnNumber","dates","map","item","date","maxTemps","predicted_tmax","minTemps","predicted_tmin","chartData","labels","datasets","label","borderColor","backgroundColor","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","tension","borderWidth","fill","options","responsive","maintainAspectRatio","plugins","legend","position","font","size","tooltip","mode","intersect","titleFont","bodyFont","padding","cornerRadius","displayColors","scales","x","grid","display","ticks","maxTicksLimit","maxRotation","minRotation","y","beginAtZero","color","title","text","weight","interaction","elements","point","radius","hoverRadius","sx","height","width","p","_c","$RefreshReg$"],"sources":["C:/Users/hamma/Desktop/CS4485/Prediction/WeatherForecastWebApp/frontend/src/components/WeatherChart.js"],"sourcesContent":["import React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { \n  Chart as ChartJS, \n  CategoryScale, \n  LinearScale, \n  PointElement, \n  LineElement, \n  Title, \n  Tooltip, \n  Legend,\n  Filler\n} from 'chart.js';\nimport { Box } from '@mui/material';\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler\n);\n\nconst WeatherChart = ({ data }) => {\n  if (!data || data.length === 0) {\n    return <div>No data available for chart</div>;\n  }\n\n  // Extract dates and temperature values\n  const dates = data.map(item => item.date);\n  const maxTemps = data.map(item => item.predicted_tmax);\n  const minTemps = data.map(item => item.predicted_tmin);\n\n  // Prepare the chart data\n  const chartData = {\n    labels: dates,\n    datasets: [\n      {\n        label: 'Max Temperature (°F)',\n        data: maxTemps,\n        borderColor: 'rgba(255, 99, 132, 1)',\n        backgroundColor: 'rgba(255, 99, 132, 0.2)',\n        pointBackgroundColor: 'rgba(255, 99, 132, 1)',\n        pointBorderColor: '#fff',\n        pointHoverBackgroundColor: '#fff',\n        pointHoverBorderColor: 'rgba(255, 99, 132, 1)',\n        tension: 0.3,\n        borderWidth: 3,\n        fill: false\n      },\n      {\n        label: 'Min Temperature (°F)',\n        data: minTemps,\n        borderColor: 'rgba(54, 162, 235, 1)',\n        backgroundColor: 'rgba(54, 162, 235, 0.2)',\n        pointBackgroundColor: 'rgba(54, 162, 235, 1)',\n        pointBorderColor: '#fff',\n        pointHoverBackgroundColor: '#fff',\n        pointHoverBorderColor: 'rgba(54, 162, 235, 1)',\n        tension: 0.3,\n        borderWidth: 3,\n        fill: false\n      }\n    ]\n  };\n\n  // Chart options\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'top',\n        labels: {\n          font: {\n            size: 14\n          }\n        }\n      },\n      tooltip: {\n        mode: 'index',\n        intersect: false,\n        backgroundColor: 'rgba(0, 0, 0, 0.8)',\n        titleFont: {\n          size: 14\n        },\n        bodyFont: {\n          size: 13\n        },\n        padding: 10,\n        cornerRadius: 8,\n        displayColors: true\n      }\n    },\n    scales: {\n      x: {\n        grid: {\n          display: false\n        },\n        ticks: {\n          maxTicksLimit: 15,\n          maxRotation: 45,\n          minRotation: 45\n        }\n      },\n      y: {\n        beginAtZero: false,\n        grid: {\n          color: 'rgba(0, 0, 0, 0.05)'\n        },\n        title: {\n          display: true,\n          text: 'Temperature (°F)',\n          font: {\n            size: 14,\n            weight: 'bold'\n          }\n        }\n      }\n    },\n    interaction: {\n      mode: 'nearest',\n      intersect: false\n    },\n    elements: {\n      point: {\n        radius: 2,\n        hoverRadius: 5\n      }\n    }\n  };\n\n  return (\n    <Box \n      sx={{ \n        height: '100%', \n        width: '100%',\n        p: 1\n      }}\n    >\n      <Line data={chartData} options={options} />\n    </Box>\n  );\n};\n\nexport default WeatherChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}